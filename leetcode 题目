##### leetcode上的题目和自己给的一些解法。 先放上来之后再优化。


Two sum:

class Solution(object):
    def twoSum(self, nums, target):
        for i in nums:
            ano=target-i
            if ano in nums:
                if ano == i:
                    if nums.count(ano)>1:
                        numss=nums[:]
                        numss.remove(i)
                        return[nums.index(i),numss.index(ano)+1]
                    else:
                        continue
                else:
                    return [nums.index(i),nums.index(ano)]
            else:
                continue


Add two numbers:

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        
        TrueResult=ListNode(0)
        result=TrueResult

        while l1 or l2 :
            if l1 and l2:
                if result.next:
                    a=l1.val+l2.val+result.next.val
                    if a < 10:
                        print('case1')
                        result.next=ListNode(a)
                    else:
                        print('case2')
                        result.next=ListNode(a%10)
                        result.next.next=ListNode(1)
                else:
                    a=l1.val+l2.val
                    if a < 10:
                        print('case3')
                        result.next=ListNode(a)
                    else:
                        print('case4')
                        result.next=ListNode(a%10)
                        result.next.next=ListNode(1)
                l1=l1.next
                l2=l2.next
            elif not l1 and l2:
                if result.next:
                    a=l2.val+result.next.val
                    if a < 10:
                        print('case5')
                        result.next=ListNode(a)
                    else:
                        print('case6')
                        result.next=ListNode(a%10)
                        result.next.next=ListNode(1)
                else:
                    print('case7')
                    a=l2.val
                    result.next=ListNode(a)
                    
                l2=l2.next
            elif not l2 and l1:
                if result.next:
                    a=l1.val+result.next.val
                    if a < 10:
                        print('case8')
                        result.next=ListNode(a)
                    else:
                        print('case9')
                        result.next=ListNode(a%10)
                        result.next.next=ListNode(1)
                else:
                    print('case10')
                    result.next=ListNode(l1.val)
                l1=l1.next
            result=result.next
            
        return TrueResult.next
                
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        

Container With Most Water 

class Solution(object):
    def maxArea(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        start = 0
        end=len(height)-1
        max_c=min(height[start],height[end])*(end-start)
        
        while end>start:
            if height[start]>height[end]:
                end-=1
                max_c=max(max_c,min(height[start],height[end])*(end-start))
            else:
                start+=1
                max_c=max(max_c,min(height[start],height[end])*(end-start))
        return max_c



3 Sum

class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        nums=sorted(nums)
        result=[]
        for i in range(len(nums)):
            if nums[i]>0:
                break
            if i>0 and nums[i]==nums[i-1]:
                continue
            l=i+1
            r=len(nums)-1
            while(l<r):
                add=nums[i]+nums[l]+nums[r]
                if add>0:
                    r-=1
                elif add<0:
                    l+=1
                else:
                    result.append([nums[i],nums[l],nums[r]])
                    while l<r and nums[l]==nums[l+1]:
                        l+=1
                    while l<r and nums[r]==nums[r-1]:
                        r-=1
                    l+=1
                    r-=1
        return result
        












       
